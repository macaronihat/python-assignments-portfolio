import numpy as np #interesting fact - no number starts with the letter p
import matplotlib.pyplot as plt

def normal_density (mean, variance, x): #note variance is represented by o^2 - it equals standard deviation squared
    fxx = ((1/np.sqrt(2 * np.pi * variance))*np.e**(-1*((x - mean)**2)/(2 * variance)))
    return fxx

def integration(mean, variance, a, b): #integration via riemann midpoints
    n = 5000
    x = np.linspace(a, b, n+1)
    mpsum = 0 #midpoint sum
    for i in x[1: n+1]:
        mpsum += normal_density(mean, variance, i) #i.e. each little tiny section of the function gets added together
    integratedmpsum = (mpsum) * (b-a)/n
    return integratedmpsum
print("probability =", integration(171, 7.1**2, 162, 190))

#for the dosing question, we want to calculate average height, then multiply by 2.38 * height (again) to get average dosing.
#to calculate average height, let's get the maximum value found by the integralator (i.e. the integration function) and use that as x.
def drmario(mean, variance, a, b): #we don't really need any of these values lol 
    n = 50000
    x = np.linspace(a, b, n+1)
    mostcommonheight = 171
    drugdose = mostcommonheight * 2.38 * mostcommonheight
    return drugdose
print("dosing =", drmario(171, 7.1**2, 0, 300), "units")

def grigorio(mean, variance, a, b): #integration via riemann midpoints
    n = 5000
    x = np.linspace(a, b, n+1)
    mpsum = 0 #midpoint sum
    for i in x[1: n+1]:
        mpsum += normal_density(mean, variance, i) #i.e. each little tiny section of the function gets added together
    integratedmpsum = (mpsum) * (b-a)/n
    return integratedmpsum
print("probability =", grigorio(0.5, 0.3413**2, 0, 1))
