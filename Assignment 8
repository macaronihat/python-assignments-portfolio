#A

def gradient_descent(x0, y0, f,grad_f, alpha, num_iterations):
    x, y = x0, y0 # revariablize x and y with the given initial point values
    for i in range(num_iterations):
        grad_x, grad_y = grad_f(x,y) 
        # Update x and y by taking a step in the opposite direction of the gradient
        x += - grad_x * alpha
        y += - grad_y * alpha
    return x, y

#B

def expo_func(x,y):
    return x**2+y**2

def grad_f_1(x,y):
    grad_x = (2*x)
    grad_y = (2*y) 
    return grad_x, grad_y

print(gradient_descent(0.1,0.1,expo_func,grad_f_1,0.1,10))
print(gradient_descent(-1,1,expo_func,grad_f_1,0.01,100))

#C

import numpy as np
def expo_func_2(x,y):
    return 1-np.exp(-x**2-(y-2)**2)-2*np.exp(-x**2-(y+2)**2)

def grad_f_2(x,y):
    grad_x = 2*x * np.exp(-x**2 - (y-2)**2) + 4*x * np.exp(-x**2 - (y+2)**2)
    grad_y = 2*(y-2) * np.exp(-x**2 - (y-2)**2) + 4*(y+2) * np.exp(-x**2 - (y+2)**2)
    return grad_x, grad_y

print(gradient_descent(0,1,expo_func_2,grad_f_2,0.01,10000))
print(gradient_descent(0,-1,expo_func_2,grad_f_2,0.01,10000))

#additional section i forgor

import numpy as np
from mpl_toolkits import mplot3d
import matplotlib.pyplot as plt
xgraph=np.linspace(-5,5,100)
ygraph=np.linspace(-5,5,100)
x,y=np.meshgrid(xgraph,ygraph)
z= 1-np.exp(-x**2-(y-2)**2)-2*np.exp(-x**2-(y+2)**2)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.plot_surface(x, y, z,cmap='viridis', edgecolor='none')
